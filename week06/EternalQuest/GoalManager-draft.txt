
//GoalManager.cs
using System;
using System.Collections.Generic;
using System.IO;

public class GoalManager
{
    private List<Goal> _goals = new List<Goal>();
    private int _score = 0;

    public GoalManager()
    {
        _goals = new List<Goal>();
        _score = 0;
    }

    public void CreateGoal()
    {
        Console.WriteLine("What type of goal would you like to create?");
        Console.WriteLine("1. Simple Goal");
        Console.WriteLine("2. Eternal Goal");
        Console.WriteLine("3. Checklist Goal");
        Console.WriteLine("4. Exit");
        Console.WriteLine("*************************************************");

        if (!int.TryParse(Console.ReadLine(), out int choice) || choice < 1 || choice > 4)
        {
            Console.WriteLine("‚ùå Invalid choice. Please enter a number between 1 and 4.");
            return;
        }

        if (choice == 4) return;

        Console.Write("Enter goal name: ");
        string name = Console.ReadLine();
        Console.Write("Enter description: ");
        string description = Console.ReadLine();

        Console.Write("Enter points: ");
        if (!int.TryParse(Console.ReadLine(), out int points))
        {
            Console.WriteLine("‚ùå Invalid input. Points must be a number.");
            return;
        }

        Goal newGoal = null;

        switch (choice)
        {
            case 1:
                newGoal = new SimpleGoal(name, description, points);
                break;
            case 2:
                newGoal = new EternalGoal(name, description, points);
                break;
            case 3:
                Console.Write("Enter target count: ");
                if (!int.TryParse(Console.ReadLine(), out int target))
                {
                    Console.WriteLine("‚ùå Invalid input. Target must be a number.");
                    return;
                }

                Console.Write("Enter bonus points: ");
                if (!int.TryParse(Console.ReadLine(), out int bonus))
                {
                    Console.WriteLine("‚ùå Invalid input. Bonus must be a number.");
                    return;
                }

                newGoal = new ChecklistGoal(name, description, points, target, bonus);
                break;
        }

        if (newGoal != null)
        {
            _goals.Add(newGoal);
            Console.WriteLine("‚úÖ Goal added successfully!");
        }
    }

    public void ListGoals()
    {
        if (_goals.Count == 0)
        {
            Console.WriteLine("‚ö† No goals available.");
            return;
        }

        Console.WriteLine("üìã Your Goals:");
        for (int i = 0; i < _goals.Count; i++)
        {
            Console.WriteLine($"{i + 1}. {_goals[i].GetDetailsString()}");
        }
    }

    public void RecordEvent()
    {
        ListGoals();
        Console.Write("Enter the number of the goal you completed: ");

        if (!int.TryParse(Console.ReadLine(), out int choice) || choice < 1 || choice > _goals.Count)
        {
            Console.WriteLine("‚ùå Invalid choice.");
            return;
        }

        Goal selectedGoal = _goals[choice - 1];
        selectedGoal.RecordEvent();
        _score += selectedGoal._points; // ‚úÖ Fix: Score updates for all goal types!
    }

    public void SaveGoals(string filetext)
    {
        using (StreamWriter writer = new StreamWriter(filetext))
        {
            writer.WriteLine(_score);
            foreach (Goal goal in _goals)
            {
                writer.WriteLine(goal.GetStringRepresentation());
            }
        }
        Console.WriteLine("üíæ Goals saved successfully.");
    }

    public void LoadGoals(string filetext)
    {
        if (!File.Exists(filetext))
        {
            Console.WriteLine("‚ö† No saved goals found.");
            return;
        }

        _goals.Clear();

        using (StreamReader reader = new StreamReader(filetext))
        {
            if (!int.TryParse(reader.ReadLine(), out _score))
            {
                Console.WriteLine("‚ùå Error reading score. File may be corrupted.");
                return;
            }

            string line;
            while ((line = reader.ReadLine()) != null)
            {
                string[] parts = line.Split('|');
                if (parts.Length < 4)
                {
                    Console.WriteLine("‚ö† Invalid data format. Skipping corrupted entry.");
                    continue;
                }

                string type = parts[0].Trim();
                string name = parts[1].Trim();
                string description = parts[2].Trim();
                int points = int.Parse(parts[3].Trim());

                Goal goal = null;

                if (type == "SimpleGoal")
                {
                    bool isComplete = bool.Parse(parts[4].Trim());
                    goal = new SimpleGoal(name, description, points);
                    if (isComplete) goal.RecordEvent();
                }
                else if (type == "EternalGoal")
                {
                    goal = new EternalGoal(name, description, points);
                }
                else if (type == "ChecklistGoal")
                {
                    if (parts.Length < 7)
                    {
                        Console.WriteLine("‚ö† Invalid ChecklistGoal data. Skipping...");
                        continue;
                    }

                    int target = int.Parse(parts[4].Trim());
                    int bonus = int.Parse(parts[5].Trim());
                    int amountCompleted = int.Parse(parts[6].Trim());

                    goal = new ChecklistGoal(name, description, points, target, bonus);
                    ((ChecklistGoal)goal)._amountCompleted = amountCompleted;
                }

                if (goal != null)
                    _goals.Add(goal);
            }
        }
        Console.WriteLine("‚úÖ Goals loaded successfully.");
    }
}
